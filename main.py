import os
import requests
import zipfile
import shutil
import subprocess
import sys
import yaml

def copy_with_overwrite(src, dest):
    """
    Copie r√©cursivement les fichiers de src vers dest, en √©crasant les fichiers existants,
    sans supprimer les fichiers dans dest qui ne sont pas pr√©sents dans src.
    """
    if os.path.isdir(src):
        if not os.path.exists(dest):
            os.makedirs(dest)
        for item in os.listdir(src):
            s = os.path.join(src, item)
            d = os.path.join(dest, item)
            copy_with_overwrite(s, d)
    else:
        # Copier le fichier en √©crasant s'il existe d√©j√†
        shutil.copy2(src, dest)

def update_code(config):
    """
    Met √† jour le code en fonction des param√®tres du fichier de configuration.
    Installe les d√©pendances pip du d√©p√¥t avant d'ex√©cuter le code.
    Ex√©cute le code en d√©finissant le r√©pertoire courant comme le dossier racine du code.
    """
    repo_url = config['repo_url']
    target_path = config['target_path']
    additional_folder = config.get('additional_folder')
    run_after_update = config.get('run_after_update', False)
    script_to_run = config.get('script_to_run', 'main.py')
    branch = config.get('branch', 'main')

    # Nettoyer l'URL du d√©p√¥t
    if repo_url.endswith('/'):
        repo_url = repo_url[:-1]
    if repo_url.endswith('.git'):
        repo_url = repo_url[:-4]

    # Construire l'URL de t√©l√©chargement du zip
    download_url = f"{repo_url}/archive/refs/heads/{branch}.zip"

    # T√©l√©charger le fichier zip
    print("üì• T√©l√©chargement de la derni√®re version du code...")
    response = requests.get(download_url)
    if response.status_code != 200:
        print(f"‚ùå √âchec du t√©l√©chargement du d√©p√¥t: {response.status_code}")
        return

    zip_filename = 'latest_code.zip'
    with open(zip_filename, 'wb') as f:
        f.write(response.content)

    # Extraire le fichier zip dans un r√©pertoire temporaire
    temp_dir = 'temp_code'
    with zipfile.ZipFile(zip_filename, 'r') as zip_ref:
        zip_ref.extractall(temp_dir)

    # Obtenir le dossier racine √† l'int√©rieur du zip
    root_folder = os.listdir(temp_dir)[0]
    code_path = os.path.join(temp_dir, root_folder)

    # Copier les fichiers vers le r√©pertoire cible en utilisant copy_with_overwrite
    print("üîÑ Mise √† jour du code...")
    copy_with_overwrite(code_path, target_path)

    # Copier le contenu d'un dossier suppl√©mentaire vers le code root
    if additional_folder:
        print("üìÅ Copie du contenu du dossier suppl√©mentaire vers le code root...")
        copy_with_overwrite(additional_folder, target_path)

    # Nettoyer les fichiers temporaires
    os.remove(zip_filename)
    shutil.rmtree(temp_dir)
    print("‚úÖ Mise √† jour du code termin√©e.")

    # Installer les d√©pendances pip si requirements.txt existe
    requirements_path = os.path.join(target_path, 'requirements.txt')
    if os.path.exists(requirements_path):
        print("üì¶ Installation des d√©pendances pip...")
        subprocess.run([sys.executable, '-m', 'pip', 'install', '-r', requirements_path])

    # Ex√©cuter le code si demand√©
    if run_after_update:
        print("üöÄ Ex√©cution du code...")
        script_path = os.path.join(target_path, script_to_run)
        if os.path.exists(script_path):
            # Changer le r√©pertoire courant vers le r√©pertoire cible
            os.chdir(target_path)
            # Ex√©cuter le script
            subprocess.run([sys.executable, script_to_run])
        else:
            print(f"‚ùå Le script {script_to_run} n'existe pas dans le r√©pertoire cible.")

if __name__ == '__main__':
    # Charger la configuration depuis le fichier YAML
    config_file = 'config.yaml'
    with open(config_file, 'r') as f:
        config = yaml.safe_load(f)

    update_code(config)
